{"remainingRequest":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kscissorfootdoctor/Desktop/Book_Web_App/src/components/ebook/EbookReder.vue?vue&type=style&index=0&id=1311ef3e&lang=scss&scoped=true&","dependencies":[{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/src/components/ebook/EbookReder.vue","mtime":1590727080387},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLkVib29rLVJlZGVyIHsKICAgIHdpZHRoOiAxMDAlOwogICAgaGVpZ2h0OiAxMDAlOwogICAgb3ZlcmZsb3c6IGhpZGRlbjsKCiAgICAuZWJvb2stcmVhZGVyLW1hc2sgewogICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgdG9wOiAwOwogICAgICAgIGxlZnQ6IDA7CiAgICAgICAgei1pbmRleDogMTUwOwogICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OwogICAgfQp9Cg=="},{"version":3,"sources":["EbookReder.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8NA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EbookReder.vue","sourceRoot":"src/components/ebook","sourcesContent":["<template>\n    <div class=\"Ebook-Reder\">\n        <div id=\"read\"></div>\n        <div class=\"ebook-reader-mask\" @click=\"onMaskClick\" @touchmove=\"move\" @touchend=\"moveEnd\"></div>\n    </div>\n</template>\n\n<script>\n    import { ebookMinx } from '../../utils/mixin'\n    import {\n        getFontFamily,\n        saveFontFamily,\n        getFontSize,\n        saveFontSize,\n        getTheme,\n        saveTheme,\n        getLocation\n    } from '../../utils/localstorage.js'\n    import Epub from 'epubjs'\n    import { getLocalForage } from '../../utils/localForage'\n\n    global.epub = Epub\n    export default {\n        mixins: [ebookMinx],\n        data() {\n            return {\n                touchStart: '',\n                touchTime: ''\n            }\n        },\n        methods: {\n            move(e) {\n                let offSetY = 0\n                if (this.firstOffsetY) {\n                    offSetY = e.changedTouches[0].clientY - this.firstOffsetY\n                    this.setOffsetY(offSetY)\n                } else {\n                    this.firstOffsetY = e.changedTouches[0].clientY\n                }\n                e.preventDefault()\n                e.stopPropagation()\n            },\n            moveEnd(e) {\n                this.setOffsetY(0)\n                this.firstOffsetY = null\n            },\n            onMaskClick(e) {\n                const offSetX = e.offsetX\n                const width = window.innerWidth\n                if (offSetX > 0 && offSetX < width * 0.3) {\n                    this.prevPage()\n                } else if (offSetX > 0 && offSetX > width * 0.7) {\n                    this.nextPage()\n                } else {\n                    this.showTitleAndMenu()\n                }\n            },\n            prevPage() {\n                if (this.rendition) {\n                    this.rendition.prev().then(() => {\n                        this.refreshLocation()\n                    })\n                    this.hideTitleAndMenu()\n                }\n            },\n            nextPage() {\n                if (this.rendition) {\n                    this.rendition.next().then(() => {\n                        this.refreshLocation()\n                    })\n                    this.hideTitleAndMenu()\n                }\n            },\n            showTitleAndMenu() {\n                if (this.menuVisible) {\n                    this.setSettingVisible(-1)\n                    this.setFontFamilyVisible(false)\n                }\n                this.setMenuVisible(!this.menuVisible)\n            },\n            initFontSize() {\n                const fontSize = getFontSize(this.fileName)\n                if (!fontSize) {\n                    saveFontSize(this.fileName, this.defultFontSize)\n                } else {\n                    this.currentBook.rendition.themes.fontSize(fontSize)\n                    this.setDefaultFontSize(fontSize)\n                }\n            },\n            initFontFamily() {\n                const font = getFontFamily(this.fileName)\n                if (!font) {\n                    saveFontFamily(this.fileName, this.defaultFontFamily)\n                } else {\n                    this.currentBook.rendition.themes.font(font)\n                    this.setDefaultFontFamily(font)\n                }\n            },\n            initTheme() {\n                let defaultTheme = getTheme(this.fileName)\n                if (!defaultTheme) {\n                    defaultTheme = this.ThemeList[0].name\n                    saveTheme(this.fileName, defaultTheme)\n                }\n                this.setDefaultTheme(defaultTheme)\n                this.ThemeList.forEach(element => {\n                    this.rendition.themes.register(element.name, element.style)\n                })\n                this.rendition.themes.select(defaultTheme)\n            },\n            initRendition() {\n                this.rendition = this.book.renderTo('read', {\n                    width: innerWidth,\n                    height: innerHeight,\n                    method: 'default'\n                })\n\n                this.rendition.display().then(() => {\n                    const localtion = getLocation(this.fileName)\n                    this.display(localtion, () => {\n                        this.initTheme()\n                        this.initFontSize()\n                        this.initFontFamily()\n                        this.initGlobleStyle()\n                    })\n                })\n                this.rendition.hooks.content.register(contents => {\n                    Promise.all([\n                        contents.addStylesheet(\n                              `${process.env.VUE_APP_RES_URL}/fonts/daysOne.css`\n                        ),\n                        contents.addStylesheet(\n                              `${process.env.VUE_APP_RES_URL}/fonts/cabin.css`\n                        ),\n                        contents.addStylesheet(\n                              `${process.env.VUE_APP_RES_URL}/fonts/montserrat.css`\n                        ),\n                        contents.addStylesheet(\n                              `${process.env.VUE_APP_RES_URL}/fonts/tangerine.css`\n                        )\n                    ]).then(() => {\n                        console.log('字体全部加载完毕...')\n                    })\n                })\n            },\n            initGesture() {\n                this.rendition.on('touchstart', e => {\n                    this.touchStart = e.changedTouches[0].clientX\n                    this.touchTime = e.timeStamp\n                })\n                this.rendition.on('touchend', e => {\n                    const offsetX = this.touchStart - e.changedTouches[0].clientX\n                    const Time = e.timeStamp - this.touchTime\n                    if (Time < 400 && offsetX > 40) {\n                        this.nextPage()\n                    } else if (Time < 400 && offsetX < -40) {\n                        this.prevPage()\n                    } else {\n                        this.showTitleAndMenu()\n                    }\n                    e.preventDefault()\n                    e.stopPropagation()\n                })\n            },\n            parseBook() {\n                this.book.loaded.cover.then(cover => {\n                    this.book.archive.createUrl(cover).then(url => {\n                        this.setCover(url)\n                    })\n                })\n                this.book.loaded.metadata.then(metadata => {\n                    this.setMetadata(metadata)\n                })\n                this.book.loaded.navigation.then(navig => {\n                    const navItem = navig.toc\n                    this.setNavigation(navItem)\n                })\n            },\n            initEpub(Url) {\n                this.book = new Epub(Url)\n                this.setCurrentBook(this.book)\n                this.initRendition()\n                this.initGesture()\n                this.parseBook()\n                this.book.ready\n                .then(() => {\n                    return this.book.locations.generate(\n                          750 * (window.innerWidth / 375) * (getFontSize(this.fileName) / 16)\n                    )\n                })\n                .then(locations => {\n                    this.setBookAvailable(true)\n                    this.refreshLocation()\n                })\n            }\n        },\n\n        mounted() {\n            const books = this.$route.params.fileName.split('|')\n            const fileName = books[1]\n            getLocalForage(fileName, (err, blob) => {\n                if (!err && blob) {\n                    console.log('1')\n                    this.setFileName(books.join('/')).then(() => {\n                        this.initEpub(blob)\n                    })\n                } else {\n                    console.log('1')\n                    this.setFileName(books.join('/')).then(\n                          () => {\n                              const Url =\n                                    `${process.env.VUE_APP_RES_URL}/epub/` + this.fileName + '.epub'\n                              this.initEpub(Url)\n                          }\n                    )\n                }\n            })\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .Ebook-Reder {\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n\n        .ebook-reader-mask {\n            position: absolute;\n            width: 100%;\n            height: 100%;\n            top: 0;\n            left: 0;\n            z-index: 150;\n            background: transparent;\n        }\n    }\n</style>\n"]}]}