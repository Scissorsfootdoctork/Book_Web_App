{"remainingRequest":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kscissorfootdoctor/Desktop/Book_Web_App/src/components/ebook/EbookReader.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/src/components/ebook/EbookReader.vue","mtime":1541580605000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Epub from 'epubjs'\nimport { ebookMixin } from '@/utils/mixin'\nimport { getLocalForage } from '../../utils/localForage'\nimport {\n  getTheme,\n  getFontFamily,\n  saveFontFamily,\n  saveTheme,\n  getFontSize,\n  saveFontSize,\n  saveMetadata,\n  getLocation\n} from '../../utils/localStorage'\n\nglobal.ePub = Epub\nexport default {\n  mixins: [ebookMixin],\n  data() {\n    return {\n      havePaginate: false,\n      isOnline: false\n    }\n  },\n  methods: {\n    move(e) {\n      let offsetY = 0\n      if (this.firstOffsetY) {\n        offsetY = e.changedTouches[0].clientY - this.firstOffsetY\n        this.$store.commit('SET_OFFSETY', offsetY)\n      } else {\n        this.firstOffsetY = e.changedTouches[0].clientY\n      }\n      e.preventDefault()\n      e.stopPropagation()\n    },\n    onMouseEnter(e) {\n      this.mouseMove = 1\n      this.mouseStartTime = e.timeStamp\n      e.preventDefault()\n      e.stopPropagation()\n    },\n    onMouseMove(e) {\n      if (this.mouseMove === 1) {\n        this.mouseMove = 2\n      } else if (this.mouseMove === 2) {\n        let offsetY = 0\n        if (this.firstOffsetY) {\n          offsetY = e.clientY - this.firstOffsetY\n          this.$store.commit('SET_OFFSETY', offsetY)\n        } else {\n          this.firstOffsetY = e.clientY\n        }\n      }\n      e.preventDefault()\n      e.stopPropagation()\n    },\n    onMouseEnd(e) {\n      if (this.mouseMove === 2) {\n        this.$store.dispatch('setOffsetY', 0)\n        this.firstOffsetY = 0\n        this.mouseMove = 3\n      }\n      this.mouseEndTime = e.timeStamp\n      const time = this.mouseEndTime - this.mouseStartTime\n      if (time < 200) {\n        this.mouseMove = 1\n      }\n      e.preventDefault()\n      e.stopPropagation()\n    },\n    moveEnd(e) {\n      this.$store.dispatch('setOffsetY', 0)\n      this.firstOffsetY = 0\n    },\n    onMaskClick(e) {\n      if (this.mouseMove === 2) {\n      } else if (this.mouseMove === 1 || this.mouseMove === 4) {\n        const offsetX = e.offsetX\n        const width = window.innerWidth\n        if (offsetX > 0 && offsetX < width * 0.3) {\n          this.prevPage()\n        } else if (offsetX > 0 && offsetX > width * 0.7) {\n          this.nextPage()\n        } else {\n          this.toggleMenuVisible()\n        }\n      }\n      this.mouseMove = 4\n    },\n    prevPage() {\n      if (this.rendition) {\n        this.rendition.prev()\n        this.refreshLocation()\n      }\n      this.hideMenuVisible()\n    },\n    nextPage() {\n      if (this.rendition) {\n        this.rendition.next()\n        this.refreshLocation()\n      }\n      this.hideMenuVisible()\n    },\n    initGuest() {\n      this.rendition.on('touchstart', event => {\n        this.touchStartX = event.changedTouches[0].clientX\n        this.touchStartTime = event.timeStamp\n      })\n      this.rendition.on('touchend', event => {\n        const offsetX = event.changedTouches[0].clientX - this.touchStartX\n        const time = event.timeStamp - this.touchStartTime\n        if (time < 500 && offsetX > 40) {\n          this.prevPage()\n        } else if (time < 500 && offsetX < -40) {\n          this.nextPage()\n        } else {\n          this.toggleMenuVisible()\n        }\n        event.preventDefault()\n        event.stopPropagation()\n      })\n    },\n    initTheme() {\n      let defaultTheme = getTheme(this.fileName)\n      if (!defaultTheme) {\n        defaultTheme = this.themeList[0].name\n        saveTheme(this.fileName, defaultTheme)\n      }\n      return defaultTheme\n    },\n    initFontSize() {\n      let fontSize = getFontSize(this.fileName)\n      if (!fontSize) {\n        fontSize = 16\n        saveFontSize(this.fileName, fontSize)\n      }\n      return fontSize\n    },\n    initFontFamily() {\n      let font = getFontFamily(this.fileName)\n      if (!font) {\n        font = 'Default'\n        saveFontFamily(this.fileName, font)\n      }\n      return font\n    },\n    initRendition() {\n      this.rendition = this.book.renderTo('read', {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        method: 'default'\n      })\n      Promise.all([\n        this.setDefaultTheme(this.initTheme()),\n        this.setDefaultFontSize(this.initFontSize()),\n        this.setDefaultFontFamily(this.initFontFamily())\n      ]).then(() => {\n        this.switchTheme()\n        if (this.$route.query.navigation) {\n          this.display(this.$route.query.navigation)\n        } else {\n          const location = getLocation(this.fileName)\n          if (location) {\n            this.display(location)\n          } else {\n            this.display()\n          }\n        }\n      })\n      this.rendition.hooks.content.register(contents => {\n        Promise.all([\n          contents.addStylesheet(`${process.env.VUE_APP_RES_URL}/fonts/daysOne.css`),\n          contents.addStylesheet(`${process.env.VUE_APP_RES_URL}/fonts/tangerine.css`),\n          contents.addStylesheet(`${process.env.VUE_APP_RES_URL}/fonts/montserrat.css`),\n          contents.addStylesheet(`${process.env.VUE_APP_RES_URL}/fonts/cabin.css`)\n        ]).then(() => {})\n      })\n    },\n    parseBook() {\n      this.book.loaded.metadata.then(metadata => {\n        this.setMetadata(metadata)\n        saveMetadata(this.fileName, metadata)\n      })\n      if (this.isOnline) {\n        this.book.coverUrl().then(url => {\n          this.setCover(url)\n        })\n      } else {\n        this.book.loaded.cover.then(cover => {\n          this.book.archive.createUrl(cover).then(url => {\n            this.setCover(url)\n          })\n        })\n      }\n      this.book.loaded.navigation.then(nav => {\n        console.log(nav)\n        const navItem = (function flatten(arr) {\n          return [].concat(...arr.map(v => [v, ...flatten(v.subitems)]))\n        })(nav.toc)\n\n        function find(item, v = 0) {\n          const parent = navItem.filter(it => it.id === item.parent)[0]\n          return !item.parent ? v : (parent ? find(parent, ++v) : v)\n        }\n\n        navItem.forEach(item => {\n          item.level = find(item)\n          item.total = 0\n          item.pagelist = []\n          if (item.href.match(/^(.*)\\.html$/)) {\n            item.idhref = item.href.match(/^(.*)\\.html$/)[1]\n          } else if (item.href.match(/^(.*)\\.xhtml$/)) {\n            item.idhref = item.href.match(/^(.*)\\.xhtml$/)[1]\n          }\n        })\n        this.setNavigation(navItem)\n      })\n      this.book.ready.then(() => {\n        this.setCurrentBook(this.book)\n        return this.book.locations.generate(750 * (window.innerWidth / 375) * (getFontSize(this.fileName) / 16))\n      }).then(locations => {\n        locations.forEach(location => {\n          const loc = location.match(/\\[(.*)\\]!/)[1]\n          console.log(loc)\n          this.navigation.forEach(item => {\n            if (item.idhref && item.idhref.indexOf(loc) >= 0) {\n              item.pagelist.push(location)\n            }\n          })\n          let currentPage = 1\n          this.navigation.forEach((item, index) => {\n            if (index === 0) {\n              item.page = 1\n            } else {\n              item.page = currentPage\n            }\n            currentPage += item.pagelist.length + 1\n          })\n        })\n        // saveNavigation(this.fileName, this.navigation)\n        this.setPagelist(locations)\n        this.setBookAvailable(true)\n        this.setIsPaginating(false)\n        this.refreshLocation()\n      })\n    },\n    initEpub(target) {\n      this.book = new Epub(target)\n      this.setCurrentBook(this.book)\n      this.setIsPaginating(true)\n      this.setPaginate(this.$t('book.paginating'))\n      this.initRendition()\n      this.initGuest()\n      this.parseBook()\n    }\n  },\n  mounted() {\n    if (this.$route.params.fileName.indexOf('|') > 0) {\n      this.setFileName(\n        this.$route.params.fileName.split('|').join('/'))\n        .then(() => {\n          // 实时下载电子书\n          this.initEpub(`${process.env.VUE_APP_EPUB_URL}/${this.fileName}.epub`)\n          this.isOnline = false\n        })\n    } else {\n      this.setFileName(this.$route.params.fileName)\n        .then(() => {\n          getLocalForage(this.fileName, (err, blob) => {\n            if (!err) {\n              if (blob) {\n                // 离线阅读模式\n                this.isOnline = false\n                this.initEpub(blob)\n              } else {\n                // 在线阅读模式\n                this.isOnline = true\n                const opf = this.$route.query.opf\n                if (opf) {\n                  this.initEpub(opf)\n                }\n              }\n            }\n          })\n        })\n    }\n  }\n}\n",{"version":3,"sources":["EbookReader.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAefile":"EbookReader.vue","sourceRoot":"src/components/ebook","sourcesContent":["<template>\n  <div class=\"ebook-reader\">\n    <div class=\"ebook-reader-mask\"\n         @touchmove=\"move\"\n         @touchend=\"moveEnd\"\n         @mousedown.left=\"onMouseEnter\"\n         @mousemove.left=\"onMouseMove\"\n         @mouseup.left=\"onMouseEnd\" @click=\"onMaskClick\"></div>\n    <div class=\"read-wrapper\">\n      <div id=\"read\"></div>\n    </div>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import Epub from 'epubjs'\n  import { ebookMixin } from '@/utils/mixin'\n  import { getLocalForage } from '../../utils/localForage'\n  import {\n    getTheme,\n    getFontFamily,\n    saveFontFamily,\n    saveTheme,\n    getFontSize,\n    saveFontSize,\n    saveMetadata,\n    getLocation\n  } from '../../utils/localStorage'\n\n  global.ePub = Epub\n  export default {\n    mixins: [ebookMixin],\n    data() {\n      return {\n        havePaginate: false,\n        isOnline: false\n      }\n    },\n    methods: {\n      move(e) {\n        let offsetY = 0\n        if (this.firstOffsetY) {\n          offsetY = e.changedTouches[0].clientY - this.firstOffsetY\n          this.$store.commit('SET_OFFSETY', offsetY)\n        } else {\n          this.firstOffsetY = e.changedTouches[0].clientY\n        }\n        e.preventDefault()\n        e.stopPropagation()\n      },\n      onMouseEnter(e) {\n        this.mouseMove = 1\n        this.mouseStartTime = e.timeStamp\n        e.preventDefault()\n        e.stopPropagation()\n      },\n      onMouseMove(e) {\n        if (this.mouseMove === 1) {\n          this.mouseMove = 2\n        } else if (this.mouseMove === 2) {\n          let offsetY = 0\n          if (this.firstOffsetY) {\n            offsetY = e.clientY - this.firstOffsetY\n            this.$store.commit('SET_OFFSETY', offsetY)\n          } else {\n            this.firstOffsetY = e.clientY\n          }\n        }\n        e.preventDefault()\n        e.stopPropagation()\n      },\n      onMouseEnd(e) {\n        if (this.mouseMove === 2) {\n          this.$store.dispatch('setOffsetY', 0)\n          this.firstOffsetY = 0\n          this.mouseMove = 3\n        }\n        this.mouseEndTime = e.timeStamp\n        const time = this.mouseEndTime - this.mouseStartTime\n        if (time < 200) {\n          this.mouseMove = 1\n        }\n        e.preventDefault()\n        e.stopPropagation()\n      },\n      moveEnd(e) {\n        this.$store.dispatch('setOffsetY', 0)\n        this.firstOffsetY = 0\n      },\n      onMaskClick(e) {\n        if (this.mouseMove === 2) {\n        } else if (this.mouseMove === 1 || this.mouseMove === 4) {\n          const offsetX = e.offsetX\n          const width = window.innerWidth\n          if (offsetX > 0 && offsetX < width * 0.3) {\n            this.prevPage()\n          } else if (offsetX > 0 && offsetX > width * 0.7) {\n            this.nextPage()\n          } else {\n            this.toggleMenuVisible()\n          }\n        }\n        this.mouseMove = 4\n      },\n      prevPage() {\n        if (this.rendition) {\n          this.rendition.prev()\n          this.refreshLocation()\n        }\n        this.hideMenuVisible()\n      },\n      nextPage() {\n        if (this.rendition) {\n          this.rendition.next()\n          this.refreshLocation()\n        }\n        this.hideMenuVisible()\n      },\n      initGuest() {\n        this.rendition.on('touchstart', event => {\n          this.touchStartX = event.changedTouches[0].clientX\n          this.touchStartTime = event.timeStamp\n        })\n        this.rendition.on('touchend', event => {\n          const offsetX = event.changedTouches[0].clientX - this.touchStartX\n          const time = event.timeStamp - this.touchStartTime\n          if (time < 500 && offsetX > 40) {\n            this.prevPage()\n          } else if (time < 500 && offsetX < -40) {\n            this.nextPage()\n          } else {\n            this.toggleMenuVisible()\n          }\n          event.preventDefault()\n          event.stopPropagation()\n        })\n      },\n      initTheme() {\n        let defaultTheme = getTheme(this.fileName)\n        if (!defaultTheme) {\n          defaultTheme = this.themeList[0].name\n          saveTheme(this.fileName, defaultTheme)\n        }\n        return defaultTheme\n      },\n      initFontSize() {\n        let fontSize = getFontSize(this.fileName)\n        if (!fontSize) {\n          fontSize = 16\n          saveFontSize(this.fileName, fontSize)\n        }\n        return fontSize\n      },\n      initFontFamily() {\n        let font = getFontFamily(this.fileName)\n        if (!font) {\n          font = 'Default'\n          saveFontFamily(this.fileName, font)\n        }\n        return font\n      },\n      initRendition() {\n        this.rendition = this.book.renderTo('read', {\n          width: window.innerWidth,\n          height: window.innerHeight,\n          method: 'default'\n        })\n        Promise.all([\n          this.setDefaultTheme(this.initTheme()),\n          this.setDefaultFontSize(this.initFontSize()),\n          this.setDefaultFontFamily(this.initFontFamily())\n        ]).then(() => {\n          this.switchTheme()\n          if (this.$route.query.navigation) {\n            this.display(this.$route.query.navigation)\n          } else {\n            const location = getLocation(this.fileName)\n            if (location) {\n              this.display(location)\n            } else {\n              this.display()\n            }\n          }\n        })\n        this.rendition.hooks.content.register(contents => {\n          Promise.all([\n            contents.addStylesheet(`${process.env.VUE_APP_RES_URL}/fonts/daysOne.css`),\n            contents.addStylesheet(`${process.env.VUE_APP_RES_URL}/fonts/tangerine.css`),\n            contents.addStylesheet(`${process.env.VUE_APP_RES_URL}/fonts/montserrat.css`),\n            contents.addStylesheet(`${process.env.VUE_APP_RES_URL}/fonts/cabin.css`)\n          ]).then(() => {})\n        })\n      },\n      parseBook() {\n        this.book.loaded.metadata.then(metadata => {\n          this.setMetadata(metadata)\n          saveMetadata(this.fileName, metadata)\n        })\n        if (this.isOnline) {\n          this.book.coverUrl().then(url => {\n            this.setCover(url)\n          })\n        } else {\n          this.book.loaded.cover.then(cover => {\n            this.book.archive.createUrl(cover).then(url => {\n              this.setCover(url)\n            })\n          })\n        }\n        this.book.loaded.navigation.then(nav => {\n          console.log(nav)\n          const navItem = (function flatten(arr) {\n            return [].concat(...arr.map(v => [v, ...flatten(v.subitems)]))\n          })(nav.toc)\n\n          function find(item, v = 0) {\n            const parent = navItem.filter(it => it.id === item.parent)[0]\n            return !item.parent ? v : (parent ? find(parent, ++v) : v)\n          }\n\n          navItem.forEach(item => {\n            item.level = find(item)\n            item.total = 0\n            item.pagelist = []\n            if (item.href.match(/^(.*)\\.html$/)) {\n              item.idhref = item.href.match(/^(.*)\\.html$/)[1]\n            } else if (item.href.match(/^(.*)\\.xhtml$/)) {\n              item.idhref = item.href.match(/^(.*)\\.xhtml$/)[1]\n            }\n          })\n          this.setNavigation(navItem)\n        })\n        this.book.ready.then(() => {\n          this.setCurrentBook(this.book)\n          return this.book.locations.generate(750 * (window.innerWidth / 375) * (getFontSize(this.fileName) / 16))\n        }).then(locations => {\n          locations.forEach(location => {\n            const loc = location.match(/\\[(.*)\\]!/)[1]\n            console.log(loc)\n            this.navigation.forEach(item => {\n              if (item.idhref && item.idhref.indexOf(loc) >= 0) {\n                item.pagelist.push(location)\n              }\n            })\n            let currentPage = 1\n            this.navigation.forEach((item, index) => {\n              if (index === 0) {\n                item.page = 1\n              } else {\n                item.page = currentPage\n              }\n              currentPage += item.pagelist.length + 1\n            })\n          })\n          // saveNavigation(this.fileName, this.navigation)\n          this.setPagelist(locations)\n          this.setBookAvailable(true)\n          this.setIsPaginating(false)\n          this.refreshLocation()\n        })\n      },\n      initEpub(target) {\n        this.book = new Epub(target)\n        this.setCurrentBook(this.book)\n        this.setIsPaginating(true)\n        this.setPaginate(this.$t('book.paginating'))\n        this.initRendition()\n        this.initGuest()\n        this.parseBook()\n      }\n    },\n    mounted() {\n      if (this.$route.params.fileName.indexOf('|') > 0) {\n        this.setFileName(\n          this.$route.params.fileName.split('|').join('/'))\n          .then(() => {\n            // 实时下载电子书\n            this.initEpub(`${process.env.VUE_APP_EPUB_URL}/${this.fileName}.epub`)\n            this.isOnline = false\n          })\n      } else {\n        this.setFileName(this.$route.params.fileName)\n          .then(() => {\n            getLocalForage(this.fileName, (err, blob) => {\n              if (!err) {\n                if (blob) {\n                  // 离线阅读模式\n                  this.isOnline = false\n                  this.initEpub(blob)\n                } else {\n                  // 在线阅读模式\n                  this.isOnline = true\n                  const opf = this.$route.query.opf\n                  if (opf) {\n                    this.initEpub(opf)\n                  }\n                }\n              }\n            })\n          })\n      }\n    }\n  }\n</script>\n\n<style lang=\"scss\" rel=\"stylesheet/scss\" scoped>\n  @import \"../../assets/styles/global\";\n\n  .ebook-reader {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    .ebook-reader-mask {\n      position: absolute;\n      z-index: 150;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n    }\n  }\n</style>\n"]}]}