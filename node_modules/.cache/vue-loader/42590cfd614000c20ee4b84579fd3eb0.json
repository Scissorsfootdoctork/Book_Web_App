{"remainingRequest":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kscissorfootdoctor/Desktop/Book_Web_App/src/views/store/bookCategory.vue?vue&type=style&index=0&id=259f528f&lang=scss&rel=stylesheet%2Fscss&scoped=true&","dependencies":[{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/src/views/store/bookCategory.vue","mtime":1541580605000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import \"../../assets/styles/global\";\n\n.book-category {\n  position: relative;\n  z-index: 100;\n  width: 100%;\n  height: 100%;\n  background: white;\n  .shelf-empty-view {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    @include center;\n    font-size: px2rem(14);\n    color: #333;\n  }\n}\n",{"version":3,"sources":["bookCategory.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiXA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bookCategory.vue","sourceRoot":"src/views/store","sourcesContent":["<template>\n  <div class=\"book-category\">\n    <shelf-title class=\"shelf-title\"\n                 :title=\"category.title\"\n                 :isEditMode.sync=\"isEditMode\"\n                 :ifShowBack=\"ifShowBack\"\n                 :ifShowClear=\"ifShowClear\"\n                 :ifGroupEmpty=\"isEmpty\"\n                 :data=\"bookList\"\n                 :category=\"category\"\n                 @onEditClick=\"onEditClick\"\n                 @deleteGroup=\"deleteGroup\"\n                 @editGroupName=\"editGroupName\"\n                 ref=\"shelfTitle\"></shelf-title>\n    <scroll-view class=\"book-shelf-scroll-wrapper\"\n                 :top=\"42\"\n                 :bottom=\"scrollBottom\"\n                 @onScroll=\"onScroll\"\n                 ref=\"scroll\"\n                 v-if=\"!isEmpty\">\n      <book-shelf class=\"book-shelf-list\"\n                  :data=\"category.itemList\"\n                  :isEditMode=\"isEditMode\"\n                  @onBookClick=\"onBookClick\"\n                  ref=\"bookShelf\"></book-shelf>\n    </scroll-view>\n    <book-shelf-footer class=\"book-shelf-footer\"\n                       :data=\"category.itemList\"\n                       :bookList=\"bookList\"\n                       :isInGroup=\"true\"\n                       :category=\"category\"\n                       @setPrivate=\"setPrivate\"\n                       @setDownload=\"setDownload\"\n                       @removeBook=\"removeBook\"\n                       @groupEdit=\"groupEdit\"\n                       v-if=\"isEditMode && !isEmpty\"></book-shelf-footer>\n    <toast :text=\"toastText\" ref=\"toast\"></toast>\n    <div class=\"shelf-empty-view\" v-if=\"isEmpty\">\n      <span class=\"shelf-empty-text\">{{$t('shelf.groupNone')}}</span>\n    </div>\n  </div>\n</template>\n\n<script>\n  import ShelfTitle from '@/components/shelf/shelfTitle'\n  import BookShelf from '@/components/shelf/shelf'\n  import ScrollView from '@/components/Scroll'\n  import BookShelfFooter from '@/components/shelf/bookShelfFooter'\n  import Toast from '@/components/shelf/toast'\n  import { getLocalStorage, setLocalStorage } from '@/utils/localStorage'\n  import { getLocalForage, removeLocalForage } from '@/utils/localForage'\n  import { download } from '@/api/book'\n  import Epub from 'epubjs'\n\n  global.ePub = Epub\n\n  const BOOK_SHELF_KEY = 'bookShelf'\n\n  export default {\n    components: {\n      ShelfTitle,\n      ScrollView,\n      BookShelf,\n      BookShelfFooter,\n      Toast\n    },\n    computed: {\n      isEmpty() {\n        if (this.category && this.category.itemList && this.category.itemList.length > 0) {\n          return false\n        } else {\n          return true\n        }\n      }\n    },\n    data() {\n      return {\n        index: null,\n        bookList: [],\n        category: {},\n        isEditMode: false,\n        ifShowBack: true,\n        ifShowClear: false,\n        scrollBottom: 0,\n        toastText: ''\n      }\n    },\n    methods: {\n      editGroupName(category, groupName) {\n        category.title = groupName\n        this.onEditClick(false)\n        this.saveBookShelfToLocalStorage()\n      },\n      deleteGroup(category) {\n        const itemList = this.getBooksFromCategory(category)\n        this.removeCategory(category)\n        this.clearAddFromBookList()\n        this.appendBookToList(itemList)\n        this.appendAddToBookList()\n        this.onEditClick(false)\n        this.saveBookShelfToLocalStorage()\n        this.$router.go(-1)\n      },\n      removeCategory(category) {\n        this.bookList = this.bookList.filter(item => {\n          return category.id !== item.id\n        })\n      },\n      getBooksFromCategory(category) {\n        return category.itemList\n      },\n      groupEdit(operation, group) {\n        switch (operation) {\n          case 1:\n            this.moveToGroup(group)\n            break\n          case 2:\n            this.newGroup(group)\n            this.moveToGroup(group)\n            break\n          case 3:\n            this.moveOutGroup()\n            break\n        }\n      },\n      getSelectedBooks() {\n        const selectedBooks = this.bookList.filter(item => {\n          return item.selected\n        })\n        this.bookList.filter(item => {\n          if (item.type === 2 && item.itemList) {\n            item.itemList.filter(subItem => {\n              if (subItem.selected) {\n                selectedBooks.push(subItem)\n              }\n            })\n          }\n        })\n        return selectedBooks\n      },\n      clearSelectedBooks() {\n        this.bookList = this.bookList.filter(item => {\n          return !item.selected\n        })\n        this.bookList.forEach(item => {\n          if (item.type === 2 && item.itemList) {\n            item.itemList = item.itemList.filter(subItem => {\n              return !subItem.selected\n            })\n          }\n        })\n      },\n      appendBookToList(selectedBooks) {\n        let id = this.bookList[this.bookList.length - 1].id + 1\n        selectedBooks.forEach(item => {\n          item.id = id++\n          this.bookList.push(item)\n        })\n      },\n      moveOutGroup() {\n        this.clearAddFromBookList()\n        const selectedBooks = this.getSelectedBooks()\n        this.clearSelectedBooks()\n        this.appendBookToList(selectedBooks)\n        this.appendAddToBookList()\n        this.onEditClick(false)\n        this.saveBookShelfToLocalStorage()\n        this.showToast(this.$t('shelf.moveBookOutSuccess'))\n      },\n      newGroup(group) {\n        this.clearAddFromBookList()\n        this.bookList.push(group)\n        this.appendAddToBookList()\n      },\n      moveToGroup(group) {\n        const selectedBooks = this.getSelectedBooks()\n        this.clearSelectedBooks()\n        if (group && group.itemList) {\n          group.itemList = [...group.itemList, ...selectedBooks]\n          group.itemList.forEach((item, index) => {\n            item.id = index + 1\n          })\n        }\n        this.onEditClick(false)\n        this.saveBookShelfToLocalStorage()\n        this.showToast(this.$t('shelf.moveBookInSuccess').replace('$1', group.title))\n      },\n      appendAddToBookList() {\n        this.bookList.push({\n          cover: '',\n          title: '',\n          type: 3,\n          id: this.bookList[this.bookList.length - 1].id + 1\n        })\n      },\n      clearAddFromBookList() {\n        this.bookList = this.bookList.filter(item => {\n          return item.type !== 3\n        })\n      },\n      removeBook() {\n        this.bookList = this.bookList.filter(item => {\n          if (item.itemList) {\n            item.itemList = item.itemList.filter(subItem => {\n              return !subItem.selected\n            })\n          }\n          return !item.selected\n        })\n        this.onEditClick(false)\n        this.saveBookShelfToLocalStorage()\n      },\n      onBookClick(item, index) {\n        this.$router.push({\n          path: '/book-store/detail',\n          query: {\n            fileName: item.fileName,\n            category: item.categoryText\n          }\n        })\n      },\n      showToast(text) {\n        this.toastText = text\n        this.$refs.toast.show()\n      },\n      removeDownloadBook(item) {\n        return new Promise((resolve, reject) => {\n          removeLocalForage(item.fileName, () => {\n            console.log(`[${item.fileName}]删除成功...`)\n            resolve()\n          }, reject)\n        })\n      },\n      downloadBook(item) {\n        return new Promise((resolve, reject) => {\n          getLocalForage(item.fileName, (err, value) => {\n            if (!err && value instanceof Blob) {\n              console.log(`[${item.fileName}]读取成功...`, value, new Epub(value))\n              resolve()\n            } else {\n              download(item, item => {\n                console.log('[' + item.fileName + ']下载成功...')\n                resolve()\n              }, reject, reject)\n            }\n          })\n        })\n      },\n      async setDownload(needDownload) {\n        if (needDownload) {\n          this.showToast(this.$t('shelf.setDownloadSuccess'))\n        } else {\n          this.showToast(this.$t('shelf.removeDownloadSuccess'))\n        }\n        for (let i = 0; i < this.bookList.length; i++) {\n          const item = this.bookList[i]\n          if (needDownload && item.selected) {\n            console.log(`item-正在处理第${i + 1}本书`)\n            await this.downloadBook(item).then(() => {\n              item.cache = needDownload\n            })\n          } else if (!needDownload && item.selected) {\n            console.log(`item-正在处理第${i + 1}本书`)\n            await this.removeDownloadBook(item).then(() => {\n              item.cache = needDownload\n            })\n          }\n          if (item.itemList) {\n            for (let i = 0; i < item.itemList.length; i++) {\n              await this.downloadItem(item.itemList[i], needDownload)\n            }\n          }\n        }\n        this.onEditClick(false)\n        this.saveBookShelfToLocalStorage()\n        console.log('数据保存成功...')\n      },\n      async downloadItem(subItem, needDownload) {\n        console.log(`subItem-正在处理${subItem.fileName}`)\n        if (needDownload && subItem.selected) {\n          await this.downloadBook(subItem).then(() => {\n            subItem.cache = needDownload\n          })\n        } else if (!needDownload && subItem.selected) {\n          await this.removeDownloadBook(subItem).then(() => {\n            subItem.cache = needDownload\n          })\n        }\n      },\n      setPrivate(v) {\n        this.bookList.forEach(item => {\n          if (item.selected) {\n            item.private = v\n          }\n          if (item.itemList) {\n            item.itemList.forEach(subItem => {\n              if (subItem.selected) {\n                subItem.private = v\n              }\n            })\n          }\n        })\n        this.onEditClick(false)\n        this.saveBookShelfToLocalStorage()\n        if (v) {\n          this.showToast(this.$t('shelf.setPrivateSuccess'))\n        } else {\n          this.showToast(this.$t('shelf.closePrivateSuccess'))\n        }\n      },\n      onEditClick(v) {\n        this.isEditMode = v\n        if (!this.isEditMode) {\n          this.bookList.forEach(item => {\n            if (item.bookId) {\n              item.selected = false\n            } else if (item.itemList) {\n              item.itemList.forEach(subItem => {\n                subItem.selected = false\n              })\n            }\n          })\n        }\n        if (this.isEditMode) {\n          this.scrollBottom = 48\n          this.$nextTick(() => {\n            if (this.$refs.scroll) {\n              this.$refs.scroll.refresh()\n            }\n          })\n        } else {\n          this.scrollBottom = 0\n          this.$nextTick(() => {\n            if (this.$refs.scroll) {\n              this.$refs.scroll.refresh()\n            }\n          })\n        }\n      },\n      onScroll(offsetY) {\n        if (offsetY > 0) {\n          this.$refs.shelfTitle.showShadow()\n        } else {\n          this.$refs.shelfTitle.hideShadow()\n        }\n      },\n      getBookList() {\n        this.bookList = this.getBookShelfFromLocalStorage()\n      },\n      getCategoryList() {\n        this.index = this.$route.query.index\n        this.category = this.bookList[this.index]\n        console.log(this.category)\n      },\n      saveBookShelfToLocalStorage() {\n        setLocalStorage(BOOK_SHELF_KEY, this.bookList)\n      },\n      getBookShelfFromLocalStorage() {\n        return getLocalStorage(BOOK_SHELF_KEY)\n      }\n    },\n    mounted() {\n      this.getBookList()\n      this.getCategoryList()\n    }\n  }\n</script>\n\n<style lang=\"scss\" rel=\"stylesheet/scss\" scoped>\n  @import \"../../assets/styles/global\";\n\n  .book-category {\n    position: relative;\n    z-index: 100;\n    width: 100%;\n    height: 100%;\n    background: white;\n    .shelf-empty-view {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      @include center;\n      font-size: px2rem(14);\n      color: #333;\n    }\n  }\n</style>\n"]}]}