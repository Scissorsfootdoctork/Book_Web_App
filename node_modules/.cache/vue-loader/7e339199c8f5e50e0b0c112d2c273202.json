{"remainingRequest":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kscissorfootdoctor/Desktop/Book_Web_App/src/views/store/bookSpeaking.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/src/views/store/bookSpeaking.vue","mtime":1541580605000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kscissorfootdoctor/Desktop/Book_Web_App/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport DetailTitle from '../../components/detail/detaiTitle'\nimport BookInfo from '../../components/detail/bookInfo'\nimport Scroll from '../../components/Scroll'\nimport SpeakPlaying from '../../components/speak/speakPlaying'\nimport Bottom from '../../components/speak/speakBottom'\nimport SpeakWindow from '../../components/speak/speakMask'\nimport Toast from '../../components/shelf/toast'\nimport { findBook, getCategoryName } from '../../utils/book'\nimport { download, flatList } from '../../api/book'\nimport { getLocalForage } from '../../utils/localForage'\nimport { realPx } from '../../utils/utils'\nimport Epub from 'epubjs'\n\nglobal.ePub = Epub\n\nexport default {\n  components: {\n    DetailTitle,\n    BookInfo,\n    Scroll,\n    SpeakPlaying,\n    Bottom,\n    SpeakWindow,\n    Toast\n  },\n  computed: {\n    currentMinute() {\n      const m = Math.floor(this.currentPlayingTime / 60)\n      return m < 10 ? '0' + m : m\n    },\n    currentSecond() {\n      const s = Math.floor(this.currentPlayingTime - parseInt(this.currentMinute) * 60)\n      return s < 10 ? '0' + s : s\n    },\n    totalMinute() {\n      const m = Math.floor(this.totalPlayingTime / 60)\n      return m < 10 ? '0' + m : m\n    },\n    totalSecond() {\n      const s = Math.floor(this.totalPlayingTime - parseInt(this.totalMinute) * 60)\n      return s < 10 ? '0' + s : s\n    },\n    leftMinute() {\n      const m = Math.floor((this.totalPlayingTime - this.currentPlayingTime) / 60)\n      return m < 10 ? '0' + m : m\n    },\n    leftSecond() {\n      const s = Math.floor((this.totalPlayingTime - this.currentPlayingTime) - parseInt(this.leftMinute) * 60)\n      return s < 10 ? '0' + s : s\n    },\n    playInfo() {\n      if (this.audioCanPlay) {\n        return {\n          currentMinute: this.currentMinute,\n          currentSecond: this.currentSecond,\n          totalMinute: this.totalMinute,\n          totalSecond: this.totalSecond,\n          leftMinute: this.leftMinute,\n          leftSecond: this.leftSecond\n        }\n      } else {\n        return null\n      }\n    },\n    lang() {\n      return this.metadata ? this.metadata.language : ''\n    },\n    disableScroll() {\n      if (this.$refs.speakWindow) {\n        return this.$refs.speakWindow.visible\n      } else {\n        return false\n      }\n    },\n    showPlay() {\n      return this.playingIndex >= 0\n    },\n    scrollBottom() {\n      return this.showPlay ? 116 : 52\n    },\n    chapter() {\n      return this.flatNavigation[this.playingIndex]\n    },\n    desc() {\n      if (this.description) {\n        return this.description.substring(0, 100)\n      } else {\n        return ''\n      }\n    },\n    flatNavigation() {\n      if (this.navigation) {\n        return Array.prototype.concat.apply([], Array.prototype.concat.apply([], this.doFlatNavigation(this.navigation.toc)))\n      } else {\n        return []\n      }\n    },\n    category() {\n      return this.bookItem ? getCategoryName(this.bookItem.category) : ''\n    },\n    title() {\n      return this.metadata ? this.metadata.title : ''\n    },\n    author() {\n      return this.metadata ? this.metadata.creator : ''\n    }\n  },\n  data() {\n    return {\n      bookItem: null,\n      book: null,\n      rendition: null,\n      metadata: null,\n      cover: null,\n      navigation: null,\n      description: null,\n      ifShowContent: true,\n      playingIndex: -1,\n      paragraph: null,\n      currentSectionIndex: null,\n      currentSectionTotal: null,\n      section: null,\n      isPlaying: false,\n      audio: null,\n      audioCanPlay: false,\n      currentPlayingTime: 0,\n      totalPlayingTime: 0,\n      playStatus: 0, // 0 - 未播放，1 - 播放中，2 - 暂停中\n      toastText: '',\n      isOnline: false\n    }\n  },\n  methods: {\n    onAudioEnded() {\n      this.resetPlay()\n      this.currentPlayingTime = this.$refs.audio.currentTime\n      const percent = Math.floor((this.currentPlayingTime / this.totalPlayingTime) * 100)\n      this.$refs.speakWindow.refreshProgress(percent)\n    },\n    onTimeUpdate() {\n      this.currentPlayingTime = this.$refs.audio.currentTime\n      const percent = Math.floor((this.currentPlayingTime / this.totalPlayingTime) * 100)\n      this.$refs.speakWindow.refreshProgress(percent)\n    },\n    onCanPlay() {\n      this.audioCanPlay = true\n      this.currentPlayingTime = this.$refs.audio.currentTime\n      this.totalPlayingTime = this.$refs.audio.duration\n    },\n    findBookFromList(fileName) {\n      flatList().then(response => {\n        if (response.status === 200) {\n          const bookList = response.data.data.filter(item => item.fileName === fileName)\n          if (bookList && bookList.length > 0) {\n            this.bookItem = bookList[0]\n            this.init()\n          }\n        }\n      })\n    },\n    init() {\n      const fileName = this.$route.query.fileName\n      if (!this.bookItem) {\n        this.bookItem = findBook(fileName)\n      }\n      if (this.bookItem) {\n        getLocalForage(fileName, (err, blob) => {\n          if (err || !blob) {\n            // this.downloadBook(fileName)\n            this.isOnline = true\n            const opf = this.$route.query.opf\n            if (opf) {\n              this.parseBook(opf)\n            }\n          } else {\n            this.isOnline = false\n            this.parseBook(blob)\n          }\n        })\n      } else {\n        this.findBookFromList(fileName)\n      }\n    },\n    downloadBook(fileName) {\n      download(\n        this.bookItem,\n        () => {\n          getLocalForage(fileName, (err, blob) => {\n            if (err) {\n              return\n            }\n            this.parseBook(blob)\n          })\n        })\n    },\n    parseBook(blob) {\n      this.book = new Epub(blob)\n      this.book.loaded.metadata.then(metadata => {\n        this.metadata = metadata\n      })\n      if (this.isOnline) {\n        this.book.coverUrl().then(url => {\n          this.cover = url\n        })\n      } else {\n        this.book.loaded.cover.then(cover => {\n          this.book.archive.createUrl(cover).then(url => {\n            this.cover = url\n          })\n        })\n      }\n      this.book.loaded.navigation.then(nav => {\n        this.navigation = nav\n      })\n      this.display()\n    },\n    back() {\n      this.$router.go(-1)\n    },\n    onScroll(offsetY) {\n      if (offsetY > realPx(42)) {\n        this.$refs.title.showShadow()\n      } else {\n        this.$refs.title.hideShadow()\n      }\n    },\n    toggleContent() {\n      this.ifShowContent = !this.ifShowContent\n    },\n    display() {\n      const height = window.innerHeight * 0.9 - realPx(40) - realPx(54) - realPx(46) - realPx(48) - realPx(60) - realPx(44)\n      this.rendition = this.book.renderTo('read', {\n        width: window.innerWidth,\n        height: height,\n        method: 'default'\n      })\n      this.rendition.display()\n    },\n    doFlatNavigation(content, deep = 1) {\n      const arr = []\n      content.forEach(item => {\n        item.deep = deep\n        arr.push(item)\n        if (item.subitems && item.subitems.length > 0) {\n          arr.push(this.doFlatNavigation(item.subitems, deep + 1))\n        }\n      })\n      return arr\n    },\n    speak(item, index) {\n      this.resetPlay()\n      this.playingIndex = index\n      this.$nextTick(() => {\n        this.$refs.scroll.refresh()\n      })\n      if (this.chapter) {\n        this.section = this.book.spine.get(this.chapter.href)\n        this.rendition.display(this.section.href).then(section => {\n          const currentPage = this.rendition.currentLocation()\n          const cfibase = section.cfiBase\n          const cfistart = currentPage.start.cfi.replace(/.*!/, '').replace(/\\)/, '')\n          const cfiend = currentPage.end.cfi.replace(/.*!/, '').replace(/\\)/, '')\n          this.currentSectionIndex = currentPage.start.displayed.page\n          this.currentSectionTotal = currentPage.start.displayed.total\n          const cfi = `epubcfi(${cfibase}!,${cfistart},${cfiend})`\n          // console.log(currentPage, cfi, cfibase, cfistart, cfiend)\n          this.book.getRange(cfi).then(range => {\n            let text = range.toLocaleString()\n            text = text.replace(/\\s(2,)/g, '')\n            text = text.replace(/\\r/g, '')\n            text = text.replace(/\\n/g, '')\n            text = text.replace(/\\t/g, '')\n            text = text.replace(/\\f/g, '')\n            this.updateText(text)\n          })\n        })\n      }\n    },\n    showToast(text) {\n      this.toastText = text\n      this.$refs.toast.show()\n    },\n    togglePlay() {\n      if (!this.isPlaying) {\n        if (this.playStatus === 0) {\n          this.play()\n        } else if (this.playStatus === 2) {\n          this.continuePlay()\n        }\n      } else {\n        this.pausePlay()\n      }\n    },\n    resetPlay() {\n      if (this.playStatus === 1) {\n        this.pausePlay()\n      }\n      this.isPlaying = false\n      this.playStatus = 0\n    },\n    play() {\n      this.createVoice(this.paragraph)\n    },\n    continuePlay() {\n      this.$refs.audio.play().then(() => {\n        this.$refs.speakPlaying[0].startAnimation()\n        this.isPlaying = true\n        this.playStatus = 1\n      })\n    },\n    pausePlay() {\n      this.$refs.audio.pause()\n      this.$refs.speakPlaying[0].stopAnimation()\n      this.isPlaying = false\n      this.playStatus = 2\n    },\n    onPlayingCardClick() {\n      this.$refs.speakWindow.show()\n    },\n    updateText(text) {\n      this.paragraph = text\n    },\n    createVoice(text) {\n      const xmlhttp = new XMLHttpRequest()\n      xmlhttp.open('GET', `${process.env.VUE_APP_VOICE_URL}/voice?text=${text}&lang=${this.lang.toLowerCase()}`, false)\n      xmlhttp.send()\n      const xmlDoc = xmlhttp.responseText\n      if (xmlDoc) {\n        const json = JSON.parse(xmlDoc)\n        if (json.path) {\n          this.$refs.audio.src = json.path\n          this.continuePlay()\n        } else {\n          this.showToast('播放失败，未生成链接')\n        }\n      } else {\n        this.showToast('播放失败')\n      }\n      /*axios.create({\n        baseURL: process.env.VUE_APP_VOICE_URL + '/voice'\n      })({\n        method: 'get',\n        params: {\n          text: text,\n          lang: this.lang.toLowerCase()\n        }\n      }).then(response => {\n        if (response.status === 200) {\n          if (response.data.error === 0) {\n            const downloadUrl = response.data.path\n            console.log('开始下载...%s', downloadUrl)\n            downloadMp3(downloadUrl, blob => {\n              const url = window.URL.createObjectURL(blob)\n              console.log(blob, url)\n              this.$refs.audio.src = url\n              this.continuePlay()\n            })\n          } else {\n            this.showToast(response.data.msg)\n          }\n        } else {\n          this.showToast('请求失败')\n        }\n      }).catch(err => {\n        console.log(err)\n        this.showToast('播放失败')\n      })*/\n    }\n  },\n  mounted() {\n    this.init()\n  }\n}\n",{"version":3,"sources":["bookSpeaking.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bookSpeaking.vue","sourceRoot":"src/views/store","sourcesContent":["<template>\n  <div class=\"book-speaking\">\n    <detail-title @back=\"back\" ref=\"title\"></detail-title>\n    <scroll class=\"content-wrapper\"\n            :top=\"42\"\n            :bottom=\"scrollBottom\"\n            :ifNoScroll=\"disableScroll\"\n            @onScroll=\"onScroll\"\n            ref=\"scroll\">\n      <book-info :cover=\"cover\"\n                 :title=\"title\"\n                 :author=\"author\"\n                 :desc=\"desc\"></book-info>\n      <div class=\"book-speak-title-wrapper\">\n        <div class=\"icon-speak-wrapper\">\n          <span class=\"icon-speak\"></span>\n        </div>\n        <div class=\"speak-title-wrapper\">\n          <span class=\"speak-title\">{{$t('speak.voice')}}</span>\n        </div>\n        <div class=\"icon-down-wrapper\" @click=\"toggleContent\">\n          <span :class=\"{'icon-down2': !ifShowContent, 'icon-up': ifShowContent}\"></span>\n        </div>\n      </div>\n      <div class=\"book-detail-content-wrapper\" v-show=\"ifShowContent\">\n        <div class=\"book-detail-content-list-wrapper\">\n          <div class=\"loading-text-wrapper\" v-if=\"!this.navigation\">\n            <span class=\"loading-text\">{{$t('detail.loading')}}</span>\n          </div>\n          <div class=\"book-detail-content-item-wrapper\">\n            <div class=\"book-detail-content-item\" v-for=\"(item, index) in flatNavigation\" :key=\"index\"\n                 @click=\"speak(item, index)\">\n              <speak-playing v-if=\"playingIndex === index\"\n                             :number=\"5\"\n                             ref=\"speakPlaying\"></speak-playing>\n              <div class=\"book-detail-content-navigation-text\" :class=\"{'is-playing': playingIndex === index}\"\n                   v-if=\"item.label\">{{item.label}}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <audio @canplay=\"onCanPlay\"\n             @timeupdate=\"onTimeUpdate\"\n             @ended=\"onAudioEnded\"\n             ref=\"audio\"></audio>\n    </scroll>\n    <bottom :chapter=\"chapter\"\n            :currentSectionIndex=\"currentSectionIndex\"\n            :currentSectionTotal=\"currentSectionTotal\"\n            :showPlay=\"showPlay\"\n            :isPlaying.sync=\"isPlaying\"\n            :playInfo=\"playInfo\"\n            @onPlayingCardClick=\"onPlayingCardClick\"></bottom>\n    <div class=\"book-wrapper\">\n      <div id=\"read\"></div>\n    </div>\n    <speak-window :title=\"this.chapter ? this.chapter.label : ''\"\n                  :book=\"book\"\n                  :section=\"section\"\n                  :currentSectionIndex.sync=\"currentSectionIndex\"\n                  :currentSectionTotal=\"currentSectionTotal\"\n                  :isPlaying.sync=\"isPlaying\"\n                  :playInfo=\"playInfo\"\n                  @updateText=\"updateText\"\n                  ref=\"speakWindow\"></speak-window>\n    <toast :text=\"toastText\" ref=\"toast\"></toast>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import DetailTitle from '../../components/detail/detaiTitle'\n  import BookInfo from '../../components/detail/bookInfo'\n  import Scroll from '../../components/Scroll'\n  import SpeakPlaying from '../../components/speak/speakPlaying'\n  import Bottom from '../../components/speak/speakBottom'\n  import SpeakWindow from '../../components/speak/speakMask'\n  import Toast from '../../components/shelf/toast'\n  import { findBook, getCategoryName } from '../../utils/book'\n  import { download, flatList } from '../../api/book'\n  import { getLocalForage } from '../../utils/localForage'\n  import { realPx } from '../../utils/utils'\n  import Epub from 'epubjs'\n\n  global.ePub = Epub\n\n  export default {\n    components: {\n      DetailTitle,\n      BookInfo,\n      Scroll,\n      SpeakPlaying,\n      Bottom,\n      SpeakWindow,\n      Toast\n    },\n    computed: {\n      currentMinute() {\n        const m = Math.floor(this.currentPlayingTime / 60)\n        return m < 10 ? '0' + m : m\n      },\n      currentSecond() {\n        const s = Math.floor(this.currentPlayingTime - parseInt(this.currentMinute) * 60)\n        return s < 10 ? '0' + s : s\n      },\n      totalMinute() {\n        const m = Math.floor(this.totalPlayingTime / 60)\n        return m < 10 ? '0' + m : m\n      },\n      totalSecond() {\n        const s = Math.floor(this.totalPlayingTime - parseInt(this.totalMinute) * 60)\n        return s < 10 ? '0' + s : s\n      },\n      leftMinute() {\n        const m = Math.floor((this.totalPlayingTime - this.currentPlayingTime) / 60)\n        return m < 10 ? '0' + m : m\n      },\n      leftSecond() {\n        const s = Math.floor((this.totalPlayingTime - this.currentPlayingTime) - parseInt(this.leftMinute) * 60)\n        return s < 10 ? '0' + s : s\n      },\n      playInfo() {\n        if (this.audioCanPlay) {\n          return {\n            currentMinute: this.currentMinute,\n            currentSecond: this.currentSecond,\n            totalMinute: this.totalMinute,\n            totalSecond: this.totalSecond,\n            leftMinute: this.leftMinute,\n            leftSecond: this.leftSecond\n          }\n        } else {\n          return null\n        }\n      },\n      lang() {\n        return this.metadata ? this.metadata.language : ''\n      },\n      disableScroll() {\n        if (this.$refs.speakWindow) {\n          return this.$refs.speakWindow.visible\n        } else {\n          return false\n        }\n      },\n      showPlay() {\n        return this.playingIndex >= 0\n      },\n      scrollBottom() {\n        return this.showPlay ? 116 : 52\n      },\n      chapter() {\n        return this.flatNavigation[this.playingIndex]\n      },\n      desc() {\n        if (this.description) {\n          return this.description.substring(0, 100)\n        } else {\n          return ''\n        }\n      },\n      flatNavigation() {\n        if (this.navigation) {\n          return Array.prototype.concat.apply([], Array.prototype.concat.apply([], this.doFlatNavigation(this.navigation.toc)))\n        } else {\n          return []\n        }\n      },\n      category() {\n        return this.bookItem ? getCategoryName(this.bookItem.category) : ''\n      },\n      title() {\n        return this.metadata ? this.metadata.title : ''\n      },\n      author() {\n        return this.metadata ? this.metadata.creator : ''\n      }\n    },\n    data() {\n      return {\n        bookItem: null,\n        book: null,\n        rendition: null,\n        metadata: null,\n        cover: null,\n        navigation: null,\n        description: null,\n        ifShowContent: true,\n        playingIndex: -1,\n        paragraph: null,\n        currentSectionIndex: null,\n        currentSectionTotal: null,\n        section: null,\n        isPlaying: false,\n        audio: null,\n        audioCanPlay: false,\n        currentPlayingTime: 0,\n        totalPlayingTime: 0,\n        playStatus: 0, // 0 - 未播放，1 - 播放中，2 - 暂停中\n        toastText: '',\n        isOnline: false\n      }\n    },\n    methods: {\n      onAudioEnded() {\n        this.resetPlay()\n        this.currentPlayingTime = this.$refs.audio.currentTime\n        const percent = Math.floor((this.currentPlayingTime / this.totalPlayingTime) * 100)\n        this.$refs.speakWindow.refreshProgress(percent)\n      },\n      onTimeUpdate() {\n        this.currentPlayingTime = this.$refs.audio.currentTime\n        const percent = Math.floor((this.currentPlayingTime / this.totalPlayingTime) * 100)\n        this.$refs.speakWindow.refreshProgress(percent)\n      },\n      onCanPlay() {\n        this.audioCanPlay = true\n        this.currentPlayingTime = this.$refs.audio.currentTime\n        this.totalPlayingTime = this.$refs.audio.duration\n      },\n      findBookFromList(fileName) {\n        flatList().then(response => {\n          if (response.status === 200) {\n            const bookList = response.data.data.filter(item => item.fileName === fileName)\n            if (bookList && bookList.length > 0) {\n              this.bookItem = bookList[0]\n              this.init()\n            }\n          }\n        })\n      },\n      init() {\n        const fileName = this.$route.query.fileName\n        if (!this.bookItem) {\n          this.bookItem = findBook(fileName)\n        }\n        if (this.bookItem) {\n          getLocalForage(fileName, (err, blob) => {\n            if (err || !blob) {\n              // this.downloadBook(fileName)\n              this.isOnline = true\n              const opf = this.$route.query.opf\n              if (opf) {\n                this.parseBook(opf)\n              }\n            } else {\n              this.isOnline = false\n              this.parseBook(blob)\n            }\n          })\n        } else {\n          this.findBookFromList(fileName)\n        }\n      },\n      downloadBook(fileName) {\n        download(\n          this.bookItem,\n          () => {\n            getLocalForage(fileName, (err, blob) => {\n              if (err) {\n                return\n              }\n              this.parseBook(blob)\n            })\n          })\n      },\n      parseBook(blob) {\n        this.book = new Epub(blob)\n        this.book.loaded.metadata.then(metadata => {\n          this.metadata = metadata\n        })\n        if (this.isOnline) {\n          this.book.coverUrl().then(url => {\n            this.cover = url\n          })\n        } else {\n          this.book.loaded.cover.then(cover => {\n            this.book.archive.createUrl(cover).then(url => {\n              this.cover = url\n            })\n          })\n        }\n        this.book.loaded.navigation.then(nav => {\n          this.navigation = nav\n        })\n        this.display()\n      },\n      back() {\n        this.$router.go(-1)\n      },\n      onScroll(offsetY) {\n        if (offsetY > realPx(42)) {\n          this.$refs.title.showShadow()\n        } else {\n          this.$refs.title.hideShadow()\n        }\n      },\n      toggleContent() {\n        this.ifShowContent = !this.ifShowContent\n      },\n      display() {\n        const height = window.innerHeight * 0.9 - realPx(40) - realPx(54) - realPx(46) - realPx(48) - realPx(60) - realPx(44)\n        this.rendition = this.book.renderTo('read', {\n          width: window.innerWidth,\n          height: height,\n          method: 'default'\n        })\n        this.rendition.display()\n      },\n      doFlatNavigation(content, deep = 1) {\n        const arr = []\n        content.forEach(item => {\n          item.deep = deep\n          arr.push(item)\n          if (item.subitems && item.subitems.length > 0) {\n            arr.push(this.doFlatNavigation(item.subitems, deep + 1))\n          }\n        })\n        return arr\n      },\n      speak(item, index) {\n        this.resetPlay()\n        this.playingIndex = index\n        this.$nextTick(() => {\n          this.$refs.scroll.refresh()\n        })\n        if (this.chapter) {\n          this.section = this.book.spine.get(this.chapter.href)\n          this.rendition.display(this.section.href).then(section => {\n            const currentPage = this.rendition.currentLocation()\n            const cfibase = section.cfiBase\n            const cfistart = currentPage.start.cfi.replace(/.*!/, '').replace(/\\)/, '')\n            const cfiend = currentPage.end.cfi.replace(/.*!/, '').replace(/\\)/, '')\n            this.currentSectionIndex = currentPage.start.displayed.page\n            this.currentSectionTotal = currentPage.start.displayed.total\n            const cfi = `epubcfi(${cfibase}!,${cfistart},${cfiend})`\n            // console.log(currentPage, cfi, cfibase, cfistart, cfiend)\n            this.book.getRange(cfi).then(range => {\n              let text = range.toLocaleString()\n              text = text.replace(/\\s(2,)/g, '')\n              text = text.replace(/\\r/g, '')\n              text = text.replace(/\\n/g, '')\n              text = text.replace(/\\t/g, '')\n              text = text.replace(/\\f/g, '')\n              this.updateText(text)\n            })\n          })\n        }\n      },\n      showToast(text) {\n        this.toastText = text\n        this.$refs.toast.show()\n      },\n      togglePlay() {\n        if (!this.isPlaying) {\n          if (this.playStatus === 0) {\n            this.play()\n          } else if (this.playStatus === 2) {\n            this.continuePlay()\n          }\n        } else {\n          this.pausePlay()\n        }\n      },\n      resetPlay() {\n        if (this.playStatus === 1) {\n          this.pausePlay()\n        }\n        this.isPlaying = false\n        this.playStatus = 0\n      },\n      play() {\n        this.createVoice(this.paragraph)\n      },\n      continuePlay() {\n        this.$refs.audio.play().then(() => {\n          this.$refs.speakPlaying[0].startAnimation()\n          this.isPlaying = true\n          this.playStatus = 1\n        })\n      },\n      pausePlay() {\n        this.$refs.audio.pause()\n        this.$refs.speakPlaying[0].stopAnimation()\n        this.isPlaying = false\n        this.playStatus = 2\n      },\n      onPlayingCardClick() {\n        this.$refs.speakWindow.show()\n      },\n      updateText(text) {\n        this.paragraph = text\n      },\n      createVoice(text) {\n        const xmlhttp = new XMLHttpRequest()\n        xmlhttp.open('GET', `${process.env.VUE_APP_VOICE_URL}/voice?text=${text}&lang=${this.lang.toLowerCase()}`, false)\n        xmlhttp.send()\n        const xmlDoc = xmlhttp.responseText\n        if (xmlDoc) {\n          const json = JSON.parse(xmlDoc)\n          if (json.path) {\n            this.$refs.audio.src = json.path\n            this.continuePlay()\n          } else {\n            this.showToast('播放失败，未生成链接')\n          }\n        } else {\n          this.showToast('播放失败')\n        }\n        /*axios.create({\n          baseURL: process.env.VUE_APP_VOICE_URL + '/voice'\n        })({\n          method: 'get',\n          params: {\n            text: text,\n            lang: this.lang.toLowerCase()\n          }\n        }).then(response => {\n          if (response.status === 200) {\n            if (response.data.error === 0) {\n              const downloadUrl = response.data.path\n              console.log('开始下载...%s', downloadUrl)\n              downloadMp3(downloadUrl, blob => {\n                const url = window.URL.createObjectURL(blob)\n                console.log(blob, url)\n                this.$refs.audio.src = url\n                this.continuePlay()\n              })\n            } else {\n              this.showToast(response.data.msg)\n            }\n          } else {\n            this.showToast('请求失败')\n          }\n        }).catch(err => {\n          console.log(err)\n          this.showToast('播放失败')\n        })*/\n      }\n    },\n    mounted() {\n      this.init()\n    }\n  }\n</script>\n\n<style lang=\"scss\" rel=\"stylesheet/scss\" scoped>\n  @import \"../../assets/styles/global\";\n\n  .book-speaking {\n    font-size: px2rem(16);\n    width: 100%;\n    background: white;\n    .content-wrapper {\n      width: 100%;\n      .book-speak-title-wrapper {\n        display: flex;\n        padding: px2rem(15);\n        box-sizing: border-box;\n        border-bottom: px2rem(1) solid #eee;\n        .icon-speak-wrapper {\n          flex: 0 0 px2rem(40);\n          @include left;\n          .icon-speak {\n            font-size: px2rem(24);\n            color: #999;\n          }\n        }\n        .speak-title-wrapper {\n          flex: 1;\n          @include left;\n          .speak-title {\n            font-size: px2rem(16);\n            font-weight: bold;\n            color: #666;\n          }\n        }\n        .icon-down-wrapper {\n          flex: 0 0 px2rem(40);\n          @include right;\n          .icon-up {\n            font-size: px2rem(12);\n            color: #999;\n          }\n          .icon-down2 {\n            font-size: px2rem(12);\n            color: #999;\n          }\n        }\n      }\n      .book-detail-content-wrapper {\n        width: 100%;\n        border-bottom: px2rem(1) solid #eee;\n        box-sizing: border-box;\n        .book-detail-content-list-wrapper {\n          padding: px2rem(10) px2rem(15);\n          .loading-text-wrapper {\n            width: 100%;\n            .loading-text {\n              font-size: px2rem(14);\n              color: #999;\n            }\n          }\n          .book-detail-content-item-wrapper {\n            .book-detail-content-item {\n              display: flex;\n              padding: px2rem(15) 0;\n              font-size: px2rem(14);\n              line-height: px2rem(16);\n              color: #333;\n              border-bottom: px2rem(1) solid #eee;\n              &:last-child {\n                border-bottom: none;\n              }\n              .book-detail-content-navigation-text {\n                flex: 1;\n                width: 100%;\n                @include ellipsis;\n                &.is-playing {\n                  color: $color-blue;\n                  font-weight: bold;\n                  margin-left: px2rem(10);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    .book-wrapper {\n      position: absolute;\n      bottom: -100%;\n      z-index: 100;\n    }\n  }\n</style>\n"]}]}